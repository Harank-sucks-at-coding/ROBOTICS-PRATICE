public class JoysticDrive extends CommandBase{
    private final DriveSubsystem driveSubsystem;
private final static XboxController driverController=RobotContainer.driverController;
public JoysticDrive(DriveSubsystem drivetrain){
    driveSubsystem= drivetrain;
    addRequirements(driveSubsystem);
}
double throttle= driverController.getLeftY();
double rotate= driverController.getRightX();
public void excute(()){
    if throttle((throttle>0 && throttle<0.25)||)(
throttle=0;
}
if((rotate>0 && rotate<0.25 ))||(rotate<0 && rotate>-0.25){
    rotate=0;
}
rotate=2*rotate
public RobotContainer() {
    configureButtonBindings();
    driveSubsytem.setDefaultCommand(
        new JoystickDrive(driveSubsytem)
    );
}
public void excute()
if (driverController.getRightTriggerAxis()>0.25;
{
    throttle=Math.signum(throttle)*0.75
}
else if(driverController.getAButton()){
    throttle=(throttle*1.1);
}
else{
    throttle=(throttle*.08);
}
driveSubsytem.drive(throttle,rotate);
public void setModePerecentVoltage() {
    leftFrontMotor.set(ControlMode.PercentOutput,0);
    rightFrontMotor.set(ControlMode.PercentOutput,0);
    leftBackMotor.set(ControlMode.PerecentOutput,0);
    rightBackMotor.set(ControlMode.PercentOutput,0);
}
public static RobotContainer m_robotContainer; 
private DriveSubsystem driveSubsystem= m_robotContainer.DriveSubsystem;
m_robotContainer=new RobotContainer();
m_robotContainer.driveSubsytem.setModePerecentVoltage();
m_robotContainer.driveSubsystem.resetEncoders();
public static final int LEFT_DRIVE_PORT=1;
public static final int RIGHT_DRIVE_PORT=2;
public static WPI_TalonFX leftBackDriveMotor=new WPI_TalonFX(LEFT_DRIVE_PORT);
public static WPI_TalonFX rightBackDriveMotor=new WPI_TalonFX(RIGHT_DRIVE_PORT);
WPI_TalonSRX leftMotorFront=RobotMap.frontLeftMotor;
WPI_TalonSRX leftMotorBack=RobotMap.backLeftMotor;
WPI_TalonSRX rightMotorFront=RobotMap.frontRightMotor;
WPI_TalonSRX rightMotorBack=RobotMap.backFrontMotor;
}

